{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","grid","islands","handleChange","bind","assertThisInitialized","event","console","log","target","value","sea","SeaParser","parseGrid","map","row","concat","JSON","stringify","coordinate","x","y","replace","displayIslands","findIslands","setState","react_default","a","createElement","onChange","island","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA+FeA,cAvEb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,MAAkB,CAChBC,KAAM,GACNC,QAAS,IALTT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IAFEA,4EAUHa,GACnBC,QAAQC,IAAIZ,MACZ,IAAMK,EAAOK,EAAMG,OAAOC,MACpBC,EAAMC,IAAUC,UAAUZ,GAE1BC,EAjCH,SAAwBA,GAC7B,OAAOA,EAAQY,IAAI,SAAAC,GACjB,SAAAC,OAAUC,KAAKC,UACbH,EAAID,IAAI,SAAAK,GACN,SAAAH,OAAUG,EAAWC,EAArB,KAAAJ,OAA0BG,EAAWE,MAGtCC,QAAQ,KAAM,IACdA,QAAQ,KAAM,SAyBDC,CADWC,YAAYb,IAEvCf,KAAK6B,SAAS,CACZxB,OACAC,6CAKF,OACEwB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2TAOAF,EAAAC,EAAAC,cAAA,0GAIAF,EAAAC,EAAAC,cAAA,wIAKFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,YAAUlB,MAAOd,KAAKI,MAAMC,KAAM4B,SAAUjC,KAAKO,kBAIvDuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBAEGhC,KAAKI,MAAME,QAAQY,IAAI,SAAAgB,GAAM,OAC5BJ,EAAAC,EAAAC,cAAA,eAAOE,KAHX,MAQFJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,4DAAR,wBA/DQC,IAAMC,WCXJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2acdc9c9.chunk.js","sourcesContent":["import React from 'react';\nimport { findIslands } from '@finding-islands/core';\nimport { SeaParser } from '@finding-islands/parsers';\nimport { Coordinate } from '@finding-islands/core/dist/types';\nimport './App.css';\n\nexport function displayIslands(islands: Coordinate[][]): string[] {\n  return islands.map(row => {\n    return `${JSON.stringify(\n      row.map(coordinate => {\n        return `${coordinate.x}-${coordinate.y}`;\n      })\n    )\n      .replace(/\"/g, '')\n      .replace(/,/g, ', ')}`;\n  });\n}\n\ntype AppState = {\n  grid: string;\n  islands: string[];\n};\n\nclass App extends React.Component<any, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  state: AppState = {\n    grid: '',\n    islands: []\n  };\n\n  private handleChange(event: { target: { value: string } }) {\n    console.log(this);\n    const grid = event.target.value;\n    const sea = SeaParser.parseGrid(grid);\n    const islandsCoordinates = findIslands(sea);\n    const islands = displayIslands(islandsCoordinates);\n    this.setState({\n      grid,\n      islands\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1>Finding Islands</h1>\n        </div>\n        <div>\n          <p>\n            Below you can write a 2d grid map of '1's (land) and '0's (water),\n            and the algorithm will return you an array of islands. Every island\n            is represented by an array of the X-Y coordinates of its tiles. An\n            island is surrounded by water and is formed by connecting adjacent\n            lands horizontally or vertically.\n          </p>\n          <p>\n            Only the characters '0', '1' and newlines are considered. Other\n            characters will be dismissed.\n          </p>\n          <p>\n            The coordinates system's origin, 0-0, is at the top-left corner and\n            increments by going on both right and down directions.\n          </p>\n        </div>\n        <div>\n          <form>\n            <label>\n              <textarea value={this.state.grid} onChange={this.handleChange} />\n            </label>\n          </form>\n        </div>\n        <div>\n          <code>\n            [\n            {this.state.islands.map(island => (\n              <pre> {island}</pre>\n            ))}\n            ]\n          </code>\n        </div>\n        <div>\n          <a href=\"https://github.com/marcusmonteirodesouza/finding-islands\">\n            Source Code\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}